;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(junk-hist face-name-history query-replace-history cider-host-history cider-minibuffer-history read-expression-history shell-command-history c-set-style-history search-ring compile-history coding-system-history yes-or-no-p-history extended-command-history buffer-name-history minibuffer-history file-name-history))
(setq query-replace-history '("  " "	" "	" "'" "\"" "\"" "palindrome_q" "palindrome-q" "  " "	" "	" "" "\"" "\"" "\"
" "\"
" "" "\"" "\"" "\"
" "\"
" "\"\"" "\"
" "\"
" "" "
" "
" "" "
" "
"))
(setq cider-host-history '("localhost"))
(setq cider-minibuffer-history '("boot.repl" "*default-dependencies*" "boot.repl/*default-dependencies*" "for" "foo" "defn" "foo" "interpose" "foo" "defn'" "g" "nil" "def" "defn" "fn" "is" "while" "parser" "with-open" "palindrome?" "with-options" "html-resource" "html/html-snippet" "wrap-anti-forgery" "wrap-defaults" "html/html-snippet" "html/template" "Employee" "sieve-of-eratosthenes" "prime-factorization"))
(setq read-expression-history '("(file-name-directory load-file-name)" "(concat \"(\\\"\" (buffer-file-name) \"\\\")\")" "(concat \"(\" (buffer-file-name) \")\")" "\\)" "(concat \"\\(\" ())" "(concat \"foo\" (buffer-file-name))" "(concat \"foo\" \"bar\")" "(concat \"\\((\" 10 \")\")" "(concat \"(\" 10 \")\")" "(buffer-file-name)"))
(setq search-ring '("xport" "clojure-sni" "my/cider" "auto-mode" "my/clojure" "clojure" "flychec" "editor" "kiwa" "y" "dependencies" "nrepl" "re" "refa" "nrepl" "tmpfile"))
(setq compile-history '("make -k "))
(setq coding-system-history '("utf-8"))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "es" "yes" "no" "yes" "es" "yes" "uyes" "yes" "yss" "yes" "no" "yes" "ye" "yes" "es" "yes" "yew" "yes" "syes" "ye" "yes"))
(setq extended-command-history '("inf-clojure-minor-mode" "inf-clojure-mode" "inf-clojure" "backward-delete-char" "revert-buffer" "clojure-mode" "cider-mode" "mkdir" "package-list-packages" "sort-lines" "html-mode" "html2text" "e2wm:dp-magit" "eval-buffer" "garbage-collect" "cider-debug-defun-at-point" "helm-M-x" "auto-complete-mode" "describe-mode" "cider-connect"))
(setq buffer-name-history '("*cider-repl test*" "*inf-clojure*" "profile.boot" "*inf-clojure*" "Cask" "boot.properties" "*cider-error*" "boot" "qboot" "*cider-error*" "*cider-repl localhost*<2>" "*cider-repl localhost*" "*cider-error*" "*cider-repl clj-blog*" "*cider-error*" "*Edit Macro*" "*cider-error*" "*Backtrace*" "*cider-error*" "pom.properties" "URLClassLoader.java" "*cider-error*" " *e2wm:blank*" "core.clj" "*cider-error*" "*4clojure-problem-37*" "*cider-error*" "*cider-repl chestnut-app*" "*cider-error*" "Pattern.java"))
(setq minibuffer-history '("inf clo min" "inf clo mo" "inf-clo" "boot" "rest" "dele" "rev" "res" "rest" "dele" "res" "cider" #("user> " 0 6 (rear-nonsticky (field read-only font-lock-face intangible) field cider-repl-prompt intangible t read-only t font-lock-face cider-repl-prompt-face)) "rest" "delete" "res" "es" "res" "delete" "clo" "res" "cloju" "res" "ci res" "clo" "cider res" "cloju" "cider" "dele" "clojure-mo"))
(setq file-name-history '("~/.boot/profile.boot" "~/projects/test/src/test/core.clj" "~/.boot/profile.boot" "~/projects/test/boot.properties" "~/.zshrc" "~/.lein/profiles.clj" "~/.boot/profile.boot" "~/projects/test/src/test/core.clj" "~/.emacs.d/modules/setup-clojure-mode.el" "~/projects/test/src/test/core.clj" "~/.emacs.d/modules/setup-clojure-mode.el" "~/.boot/profile.boot" "~/projects/test/src/test/core.clj" "~/.tmux.conf" "~/.emacs.d/Cask" "~/.emacs.d/modules/setup-clojure-mode.el" "~/projects/test/src/test/core.clj" "~/.emacs.d/modules/setup-clojure-mode.el" "~/projects/test/build.boot" "~/projects/test/project.clj" "~/projects/test/src/test/core.clj" "~/.emacs.d/modules/setup-clojure-mode.el" "~/projects/test/src/test/core.clj" "~/.emacs.d/init.el" "~/.emacs.d/Cask" "~/.emacs.d/modules/setup-clojure-mode.el" "~/projects/test/src/test/core.clj" "~/.boot/profile.boot" "~/projects/test/src/test/core.clj" "~/.emacs.d/Cask"))

;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(junk-hist face-name-history query-replace-history cider-host-history cider-minibuffer-history read-expression-history shell-command-history c-set-style-history search-ring compile-history coding-system-history yes-or-no-p-history extended-command-history buffer-name-history minibuffer-history file-name-history))
(setq query-replace-history '("  " "	" "	" "'" "\"" "\"" "palindrome_q" "palindrome-q" "  " "	" "	" "" "\"" "\"" "\"
" "\"
" "" "\"" "\"" "\"
" "\"
" "\"\"" "\"
" "\"
" "" "
" "
" "" "
" "
"))
(setq cider-host-history '("localhost"))
(setq cider-minibuffer-history '("boot.repl" "*default-dependencies*" "boot.repl/*default-dependencies*" "for" "foo" "defn" "foo" "interpose" "foo" "defn'" "g" "nil" "def" "defn" "fn" "is" "while" "parser" "with-open" "palindrome?" "with-options" "html-resource" "html/html-snippet" "wrap-anti-forgery" "wrap-defaults" "html/html-snippet" "html/template" "Employee" "sieve-of-eratosthenes" "prime-factorization"))
(setq read-expression-history '("(file-name-directory load-file-name)" "(concat \"(\\\"\" (buffer-file-name) \"\\\")\")" "(concat \"(\" (buffer-file-name) \")\")" "\\)" "(concat \"\\(\" ())" "(concat \"foo\" (buffer-file-name))" "(concat \"foo\" \"bar\")" "(concat \"\\((\" 10 \")\")" "(concat \"(\" 10 \")\")" "(buffer-file-name)"))
(setq search-ring '("y" "dependencies" "nrepl" "re" "refa" "nrepl" "tmpfile" "tmp" "tmpma" "tmppath" "tmp" "hi" "speak" "lein-" "nrepl" "clojure"))
(setq compile-history '("make -k "))
(setq coding-system-history '("utf-8"))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "es" "yes" "no" "yes" "es" "yes" "uyes" "yes" "yss" "yes" "no" "yes" "ye" "yes" "es" "yes" "yew" "yes" "syes" "ye" "yes"))
(setq extended-command-history '("cider-restart" "backward-delete-char" "revert-buffer" "clojure-mode" "cider-mode" "mkdir" "4clojure-next-question" "4clojure-check-answers" "4clojure-open-question" "package-list-packages" "sort-lines" "html-mode" "html2text" "e2wm:dp-magit" "eval-buffer" "garbage-collect" "cider-debug-defun-at-point" "helm-M-x" "auto-complete-mode" "describe-mode" "cider-connect"))
(setq buffer-name-history '("boot.properties" "*cider-error*" "boot" "qboot" "*cider-error*" "*cider-repl localhost*<2>" "*cider-repl localhost*" "*cider-error*" "*cider-repl clj-blog*" "*cider-error*" "*Edit Macro*" "*cider-error*" "*Backtrace*" "*cider-error*" "pom.properties" "URLClassLoader.java" "*cider-error*" " *e2wm:blank*" "core.clj" "*cider-error*" "*4clojure-problem-37*" "*cider-error*" "*cider-repl chestnut-app*" "*cider-error*" "Pattern.java" "*cider-error*" "lein-template.txt" "*Edit Macro*" "*cider-error*" "core.clj|test"))
(setq minibuffer-history '("rest" "dele" "rev" "res" "rest" "dele" "res" "cider" #("user> " 0 6 (font-lock-face cider-repl-prompt-face read-only t intangible t field cider-repl-prompt rear-nonsticky (field read-only font-lock-face intangible))) "rest" "delete" "res" "es" "res" "delete" "clo" "res" "cloju" "res" "ci res" "clo" "cider res" "cloju" "cider" "dele" "clojure-mo" "cider-mo" #("html" 0 4 (face font-lock-function-name-face fontified t)) "revert" "mkd"))
(setq file-name-history '("~/projects/clj-blog/src/user.clj" "~/projects/jstest/test.js" "~/projects/clj-blog/src/user.clj" "~/.boot/profile.boot" "~/projects/clj-blog/build.boot" "~/projects/clj-blog/boot.properties" "~/.boot/profile.boot" "~/projects/clj-blog/boot.properties" "~/projects/clj-blog/build.boot" "~/projects/clj-blog/src/user.clj" "~/.boot/profile.boot" "~/projects/clj-blog/src/user.clj" "~/.boot/profile.boot" "~/projects/clj-blog/src/user.clj" "~/.emacs.d/modules/setup-clojure-mode.el" "~/bin/qboot" "~/bin/boot" "~/bin/qboot" "~/projects/clj-blog/build.boot" "~/.boot/profile.boot" "~/projects/clj-blog/src/user.clj" "~/.lein/profiles.clj" "~/projects/clj-blog/build.boot" "~/.boot/profile.boot" "~/projects/clj-blog/src/user.clj" "~/.boot/profile.boot" "~/projects/clj-blog/src/user.clj" "~/.lein/profiles.clj" "~/.boot/profile.boot" "~/.emacs.d/modules/setup-clojure-mode.el"))
